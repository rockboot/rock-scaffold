plugins {
    id 'idea'
    id 'java-library'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
}

ext {
    springBootVersion = '2.6.2'
    liquibaseVersion = '4.7.1'
    druidSpringBoorStaterVersion = '1.2.8'
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

configure(allprojects) {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java-library'
    apply plugin: "maven"
    apply plugin: "maven-publish"

    dependencyManagement {
        imports {
            mavenBom "com.fasterxml.jackson:jackson-bom:2.13.1"
            mavenBom "io.netty:netty-bom:4.1.73.Final"
            mavenBom "io.projectreactor:reactor-bom:2020.0.15"
            mavenBom "io.r2dbc:r2dbc-bom:Arabba-SR12"
            mavenBom "io.rsocket:rsocket-bom:1.1.1"
            mavenBom "org.eclipse.jetty:jetty-bom:11.0.7"
            mavenBom "org.jetbrains.kotlin:kotlin-bom:1.6.10"
            mavenBom "org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.6.0"
            mavenBom "org.jetbrains.kotlinx:kotlinx-serialization-bom:1.3.2"
            mavenBom "org.junit:junit-bom:5.8.2"
        }
        dependencies {
            dependencySet(group: 'org.apache.logging.log4j', version: '2.17.1') {
                entry 'log4j-api'
                entry 'log4j-core'
                entry 'log4j-jul'
                entry 'log4j-slf4j-impl'
            }
            dependency "org.slf4j:slf4j-api:1.7.35"

            dependencySet(group: 'org.mockito', version: '4.3.1') {
                entry('mockito-core') {
                    exclude group: "org.hamcrest", name: "hamcrest-core"
                }
                entry 'mockito-junit-jupiter'
            }
        }
        generatedPomCustomization {
            enabled = false
        }
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
        repositories {
            mavenCentral()
            maven { url "https://repo.spring.io/libs-spring-framework-build" }
        }
    }
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
            cacheDynamicVersionsFor 0, "seconds"
        }
    }
}


configure(subprojects) { subproject ->
    group = "top.rockboot.${subproject.name}"
    version = "${property('rock-scaffold-version')}"


    test {
        useJUnitPlatform()
        include(["**/*Tests.class", "**/*Test.class"])
    }

    dependencies {

        api "org.springframework.boot:spring-boot-starter:$springBootVersion"

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
        testImplementation("org.junit.platform:junit-platform-suite-api")
        testImplementation("org.mockito:mockito-core")
        testImplementation("org.mockito:mockito-junit-jupiter")

        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        testRuntimeOnly("org.junit.platform:junit-platform-suite-engine")
        testRuntimeOnly("org.apache.logging.log4j:log4j-core")
        testRuntimeOnly("org.apache.logging.log4j:log4j-jul")
        testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j-impl")
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'rock.scaffold'
                artifactId = 'library'
                version = "${property('rock-scaffold-version')}"

                from components.java
            }
        }
    }

}

